Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.10/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.10/x64/lib/python3.8/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.10/x64/lib/python3.8/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.8.10/x64/lib/python3.8/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.8.10/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.10/x64/lib/python3.8/site-packages/nbclient/client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.10/x64/lib/python3.8/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.10/x64/lib/python3.8/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from graspologic.layouts import layout_umap, show_graph
from graspologic.simulations import er_np
import networkx as nx
import seaborn as sns

n = 50  # network with 50 nodes
p = 0.3  # probability of an edge existing is .3

# sample a single simple adjacency matrix from ER(50, .3)
A = er_np(n=n, p=p, directed=False, loops=False)

g = nx.convert_matrix.from_numpy_matrix(A)
di = {}
for i in range(len(list(g.nodes))):
    di[list(g.nodes)[i]] = str(list(g.nodes)[i])
g = nx.relabel_nodes(g, di)

tupl = layout_umap(g)

nodes = list(g.nodes)
colors = sns.color_palette(n_colors = g.number_of_nodes())
node_to_color = dict(zip(nodes, colors))

show_graph(tupl[0], tupl[1], node_to_color, edge_alpha=1)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
[0;32m/tmp/ipykernel_1707/2669332083.py[0m in [0;36m<module>[0;34m[0m
[1;32m     16[0m [0mg[0m [0;34m=[0m [0mnx[0m[0;34m.[0m[0mrelabel_nodes[0m[0;34m([0m[0mg[0m[0;34m,[0m [0mdi[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     17[0m [0;34m[0m[0m
[0;32m---> 18[0;31m [0mtupl[0m [0;34m=[0m [0mlayout_umap[0m[0;34m([0m[0mg[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     19[0m [0;34m[0m[0m
[1;32m     20[0m [0mnodes[0m [0;34m=[0m [0mlist[0m[0;34m([0m[0mg[0m[0;34m.[0m[0mnodes[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.8.10/x64/lib/python3.8/site-packages/graspologic/layouts/auto.py[0m in [0;36mlayout_umap[0;34m(graph, min_dist, n_neighbors, max_edges, random_seed, adjust_overlaps)[0m
[1;32m    191[0m         [0mmin_dist[0m[0;34m=[0m[0mmin_dist[0m[0;34m,[0m [0mn_neighbors[0m[0;34m=[0m[0mn_neighbors[0m[0;34m,[0m [0mrandom_state[0m[0;34m=[0m[0mrandom_seed[0m[0;34m[0m[0;34m[0m[0m
[1;32m    192[0m     ).fit_transform(tensors)
[0;32m--> 193[0;31m     positions = _node_positions_from(
[0m[1;32m    194[0m         [0mlcc_graph[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    195[0m         [0mlabels[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.8.10/x64/lib/python3.8/site-packages/graspologic/layouts/auto.py[0m in [0;36m_node_positions_from[0;34m(graph, labels, down_projection_2d, random_seed, adjust_overlaps)[0m
[1;32m    261[0m     [0mcovered_area[0m [0;34m=[0m [0m_covered_size[0m[0;34m([0m[0msizes[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    262[0m     [0mscaled_points[0m [0;34m=[0m [0m_scale_points[0m[0;34m([0m[0mdown_projection_2d[0m[0;34m,[0m [0mcovered_area[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 263[0;31m     [0mpartitions[0m [0;34m=[0m [0mleiden[0m[0;34m([0m[0mgraph[0m[0;34m,[0m [0mrandom_seed[0m[0;34m=[0m[0mrandom_seed[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    264[0m     positions = [
[1;32m    265[0m         NodePosition(

[0;32m/opt/hostedtoolcache/Python/3.8.10/x64/lib/python3.8/site-packages/graspologic/partition/leiden.py[0m in [0;36mleiden[0;34m(graph, starting_communities, extra_forced_iterations, resolution, randomness, use_modularity, random_seed, weight_attribute, is_weighted, weight_default, check_directed)[0m
[1;32m    322[0m     )
[1;32m    323[0m [0;34m[0m[0m
[0;32m--> 324[0;31m     _improved, _modularity, partitions = gn.leiden(
[0m[1;32m    325[0m         [0medges[0m[0;34m=[0m[0mgraph[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    326[0m         [0mstarting_communities[0m[0;34m=[0m[0mstarting_communities[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;31mValueError[0m: not enough values to unpack (expected 3, got 2)
ValueError: not enough values to unpack (expected 3, got 2)

