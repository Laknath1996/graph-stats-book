Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.9/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.9/x64/lib/python3.8/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.9/x64/lib/python3.8/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.8.9/x64/lib/python3.8/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.8.9/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.9/x64/lib/python3.8/site-packages/nbclient/client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.9/x64/lib/python3.8/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.9/x64/lib/python3.8/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
plot_latents(latents, title="MASE embedding", labels=labels);
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
[0;32m<ipython-input-27-f8c0e82fc872>[0m in [0;36m<module>[0;34m[0m
[0;32m----> 1[0;31m [0mplot_latents[0m[0;34m([0m[0mlatents[0m[0;34m,[0m [0mtitle[0m[0;34m=[0m[0;34m"MASE embedding"[0m[0;34m,[0m [0mlabels[0m[0;34m=[0m[0mlabels[0m[0;34m)[0m[0;34m;[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m<ipython-input-5-ae8548dbf8bb>[0m in [0;36mplot_latents[0;34m(latent_positions, title, labels, ax, legend, fontdict, **kwargs)[0m
[1;32m      5[0m     [0;32mif[0m [0max[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m      6[0m         [0max[0m [0;34m=[0m [0mplt[0m[0;34m.[0m[0mgca[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 7[0;31m     plot = sns.scatterplot(latent_positions[:, 0], latent_positions[:, 1], hue=labels, 
[0m[1;32m      8[0m                            s=10, ax=ax, palette="Set1", color='k', **kwargs)
[1;32m      9[0m     [0;32mif[0m [0mtitle[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.8.9/x64/lib/python3.8/site-packages/seaborn/_decorators.py[0m in [0;36minner_f[0;34m(*args, **kwargs)[0m
[1;32m     44[0m             )
[1;32m     45[0m         [0mkwargs[0m[0;34m.[0m[0mupdate[0m[0;34m([0m[0;34m{[0m[0mk[0m[0;34m:[0m [0marg[0m [0;32mfor[0m [0mk[0m[0;34m,[0m [0marg[0m [0;32min[0m [0mzip[0m[0;34m([0m[0msig[0m[0;34m.[0m[0mparameters[0m[0;34m,[0m [0margs[0m[0;34m)[0m[0;34m}[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 46[0;31m         [0;32mreturn[0m [0mf[0m[0;34m([0m[0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     47[0m     [0;32mreturn[0m [0minner_f[0m[0;34m[0m[0;34m[0m[0m
[1;32m     48[0m [0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.8.9/x64/lib/python3.8/site-packages/seaborn/relational.py[0m in [0;36mscatterplot[0;34m(x, y, hue, style, size, data, palette, hue_order, hue_norm, sizes, size_order, size_norm, markers, style_order, x_bins, y_bins, units, estimator, ci, n_boot, alpha, x_jitter, y_jitter, legend, ax, **kwargs)[0m
[1;32m    799[0m [0;34m[0m[0m
[1;32m    800[0m     [0mvariables[0m [0;34m=[0m [0m_ScatterPlotter[0m[0;34m.[0m[0mget_semantics[0m[0;34m([0m[0mlocals[0m[0;34m([0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 801[0;31m     p = _ScatterPlotter(
[0m[1;32m    802[0m         [0mdata[0m[0;34m=[0m[0mdata[0m[0;34m,[0m [0mvariables[0m[0;34m=[0m[0mvariables[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    803[0m         [0mx_bins[0m[0;34m=[0m[0mx_bins[0m[0;34m,[0m [0my_bins[0m[0;34m=[0m[0my_bins[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.8.9/x64/lib/python3.8/site-packages/seaborn/relational.py[0m in [0;36m__init__[0;34m(self, data, variables, x_bins, y_bins, estimator, ci, n_boot, alpha, x_jitter, y_jitter, legend)[0m
[1;32m    585[0m         )
[1;32m    586[0m [0;34m[0m[0m
[0;32m--> 587[0;31m         [0msuper[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0m__init__[0m[0;34m([0m[0mdata[0m[0;34m=[0m[0mdata[0m[0;34m,[0m [0mvariables[0m[0;34m=[0m[0mvariables[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    588[0m [0;34m[0m[0m
[1;32m    589[0m         [0mself[0m[0;34m.[0m[0malpha[0m [0;34m=[0m [0malpha[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.8.9/x64/lib/python3.8/site-packages/seaborn/_core.py[0m in [0;36m__init__[0;34m(self, data, variables)[0m
[1;32m    602[0m     [0;32mdef[0m [0m__init__[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mdata[0m[0;34m=[0m[0;32mNone[0m[0;34m,[0m [0mvariables[0m[0;34m=[0m[0;34m{[0m[0;34m}[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    603[0m [0;34m[0m[0m
[0;32m--> 604[0;31m         [0mself[0m[0;34m.[0m[0massign_variables[0m[0;34m([0m[0mdata[0m[0;34m,[0m [0mvariables[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    605[0m [0;34m[0m[0m
[1;32m    606[0m         [0;32mfor[0m [0mvar[0m[0;34m,[0m [0mcls[0m [0;32min[0m [0mself[0m[0;34m.[0m[0m_semantic_mappings[0m[0;34m.[0m[0mitems[0m[0;34m([0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.8.9/x64/lib/python3.8/site-packages/seaborn/_core.py[0m in [0;36massign_variables[0;34m(self, data, variables)[0m
[1;32m    665[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    666[0m             [0mself[0m[0;34m.[0m[0minput_format[0m [0;34m=[0m [0;34m"long"[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 667[0;31m             plot_data, variables = self._assign_variables_longform(
[0m[1;32m    668[0m                 [0mdata[0m[0;34m,[0m [0;34m**[0m[0mvariables[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    669[0m             )

[0;32m/opt/hostedtoolcache/Python/3.8.9/x64/lib/python3.8/site-packages/seaborn/_core.py[0m in [0;36m_assign_variables_longform[0;34m(self, data, **kwargs)[0m
[1;32m    924[0m         [0;31m# Construct a tidy plot DataFrame. This will convert a number of[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    925[0m         [0;31m# types automatically, aligning on index in case of pandas objects[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 926[0;31m         [0mplot_data[0m [0;34m=[0m [0mpd[0m[0;34m.[0m[0mDataFrame[0m[0;34m([0m[0mplot_data[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    927[0m [0;34m[0m[0m
[1;32m    928[0m         [0;31m# Reduce the variables dictionary to fields with valid data[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.8.9/x64/lib/python3.8/site-packages/pandas/core/frame.py[0m in [0;36m__init__[0;34m(self, data, index, columns, dtype, copy)[0m
[1;32m    527[0m [0;34m[0m[0m
[1;32m    528[0m         [0;32melif[0m [0misinstance[0m[0;34m([0m[0mdata[0m[0;34m,[0m [0mdict[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 529[0;31m             [0mmgr[0m [0;34m=[0m [0minit_dict[0m[0;34m([0m[0mdata[0m[0;34m,[0m [0mindex[0m[0;34m,[0m [0mcolumns[0m[0;34m,[0m [0mdtype[0m[0;34m=[0m[0mdtype[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    530[0m         [0;32melif[0m [0misinstance[0m[0;34m([0m[0mdata[0m[0;34m,[0m [0mma[0m[0;34m.[0m[0mMaskedArray[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    531[0m             [0;32mimport[0m [0mnumpy[0m[0;34m.[0m[0mma[0m[0;34m.[0m[0mmrecords[0m [0;32mas[0m [0mmrecords[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.8.9/x64/lib/python3.8/site-packages/pandas/core/internals/construction.py[0m in [0;36minit_dict[0;34m(data, index, columns, dtype)[0m
[1;32m    285[0m             [0marr[0m [0;32mif[0m [0;32mnot[0m [0mis_datetime64tz_dtype[0m[0;34m([0m[0marr[0m[0;34m)[0m [0;32melse[0m [0marr[0m[0;34m.[0m[0mcopy[0m[0;34m([0m[0;34m)[0m [0;32mfor[0m [0marr[0m [0;32min[0m [0marrays[0m[0;34m[0m[0;34m[0m[0m
[1;32m    286[0m         ]
[0;32m--> 287[0;31m     [0;32mreturn[0m [0marrays_to_mgr[0m[0;34m([0m[0marrays[0m[0;34m,[0m [0mdata_names[0m[0;34m,[0m [0mindex[0m[0;34m,[0m [0mcolumns[0m[0;34m,[0m [0mdtype[0m[0;34m=[0m[0mdtype[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    288[0m [0;34m[0m[0m
[1;32m    289[0m [0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.8.9/x64/lib/python3.8/site-packages/pandas/core/internals/construction.py[0m in [0;36marrays_to_mgr[0;34m(arrays, arr_names, index, columns, dtype, verify_integrity)[0m
[1;32m     78[0m         [0;31m# figure out the index, if necessary[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     79[0m         [0;32mif[0m [0mindex[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 80[0;31m             [0mindex[0m [0;34m=[0m [0mextract_index[0m[0;34m([0m[0marrays[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     81[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     82[0m             [0mindex[0m [0;34m=[0m [0mensure_index[0m[0;34m([0m[0mindex[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.8.9/x64/lib/python3.8/site-packages/pandas/core/internals/construction.py[0m in [0;36mextract_index[0;34m(data)[0m
[1;32m    399[0m             [0mlengths[0m [0;34m=[0m [0mlist[0m[0;34m([0m[0mset[0m[0;34m([0m[0mraw_lengths[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    400[0m             [0;32mif[0m [0mlen[0m[0;34m([0m[0mlengths[0m[0;34m)[0m [0;34m>[0m [0;36m1[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 401[0;31m                 [0;32mraise[0m [0mValueError[0m[0;34m([0m[0;34m"arrays must all be same length"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    402[0m [0;34m[0m[0m
[1;32m    403[0m             [0;32mif[0m [0mhave_dicts[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mValueError[0m: arrays must all be same length
ValueError: arrays must all be same length

